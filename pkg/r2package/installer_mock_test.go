// Code generated by MockGen. DO NOT EDIT.
// Source: installer.go

// Package r2package is a generated GoMock package.
package r2package

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	exec "os/exec"
	reflect "reflect"
)

// Mockexecutor is a mock of executor interface
type Mockexecutor struct {
	ctrl     *gomock.Controller
	recorder *MockexecutorMockRecorder
}

// MockexecutorMockRecorder is the mock recorder for Mockexecutor
type MockexecutorMockRecorder struct {
	mock *Mockexecutor
}

// NewMockexecutor creates a new mock instance
func NewMockexecutor(ctrl *gomock.Controller) *Mockexecutor {
	mock := &Mockexecutor{ctrl: ctrl}
	mock.recorder = &MockexecutorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *Mockexecutor) EXPECT() *MockexecutorMockRecorder {
	return m.recorder
}

// Run mocks base method
func (m *Mockexecutor) Run(c *exec.Cmd) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run
func (mr *MockexecutorMockRecorder) Run(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*Mockexecutor)(nil).Run), c)
}

// Mockfetcher is a mock of fetcher interface
type Mockfetcher struct {
	ctrl     *gomock.Controller
	recorder *MockfetcherMockRecorder
}

// MockfetcherMockRecorder is the mock recorder for Mockfetcher
type MockfetcherMockRecorder struct {
	mock *Mockfetcher
}

// NewMockfetcher creates a new mock instance
func NewMockfetcher(ctrl *gomock.Controller) *Mockfetcher {
	mock := &Mockfetcher{ctrl: ctrl}
	mock.recorder = &MockfetcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *Mockfetcher) EXPECT() *MockfetcherMockRecorder {
	return m.recorder
}

// Fetch mocks base method
func (m *Mockfetcher) Fetch(ctx context.Context, dir string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fetch", ctx, dir)
	ret0, _ := ret[0].(error)
	return ret0
}

// Fetch indicates an expected call of Fetch
func (mr *MockfetcherMockRecorder) Fetch(ctx, dir interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*Mockfetcher)(nil).Fetch), ctx, dir)
}

// MockfileManager is a mock of fileManager interface
type MockfileManager struct {
	ctrl     *gomock.Controller
	recorder *MockfileManagerMockRecorder
}

// MockfileManagerMockRecorder is the mock recorder for MockfileManager
type MockfileManagerMockRecorder struct {
	mock *MockfileManager
}

// NewMockfileManager creates a new mock instance
func NewMockfileManager(ctrl *gomock.Controller) *MockfileManager {
	mock := &MockfileManager{ctrl: ctrl}
	mock.recorder = &MockfileManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockfileManager) EXPECT() *MockfileManagerMockRecorder {
	return m.recorder
}

// CopyFile mocks base method
func (m *MockfileManager) CopyFile(src, dst string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyFile", src, dst)
	ret0, _ := ret[0].(error)
	return ret0
}

// CopyFile indicates an expected call of CopyFile
func (mr *MockfileManagerMockRecorder) CopyFile(src, dst interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyFile", reflect.TypeOf((*MockfileManager)(nil).CopyFile), src, dst)
}
